--------------------------------------------------------
--  File created - poniedzia³ek-maja-30-2022   
--------------------------------------------------------
DROP SEQUENCE "SEQ_ID_ADDRESS";
DROP SEQUENCE "SEQ_ID_CAR";
DROP SEQUENCE "SEQ_ID_CAR_TYPE";
DROP SEQUENCE "SEQ_ID_DEPARTMENT";
DROP SEQUENCE "SEQ_ID_INVOICE";
DROP SEQUENCE "SEQ_ID_MANUFACTURER";
DROP SEQUENCE "SEQ_ID_RENT";
DROP SEQUENCE "SEQ_ID_TOWN";
DROP SEQUENCE "SEQ_ID_USER";
DROP SEQUENCE "SEQ_VAT_RATES";
DROP TABLE "ADDRESSES";
DROP TABLE "CARS";
DROP TABLE "CAR_TYPES";
DROP TABLE "DEPARTMENTS";
DROP TABLE "INVOICES";
DROP TABLE "MANUFACTURERS";
DROP TABLE "RENTS";
DROP TABLE "TOWNS";
DROP TABLE "USERS";
DROP TABLE "VAT_RATES";
DROP VIEW "CARS_BELOW_AVERAGE_PRODUCTION_YEAR";
DROP VIEW "CARS_IN_RENT";
DROP VIEW "CARS_MILEAGE";
DROP VIEW "INSPECTION_DATE_OR_INSURANCE_END_WITHIN_30_DAYS";
DROP VIEW "INVOICES_DETAILED";
DROP PROCEDURE "ADD_ADDRESS";
DROP PROCEDURE "ADD_CAR";
DROP PROCEDURE "ADD_CAR_TYPE";
DROP PROCEDURE "ADD_DEPARTMENT";
DROP PROCEDURE "ADD_INVOICE";
DROP PROCEDURE "ADD_MANUFACTURER";
DROP PROCEDURE "ADD_RENT";
DROP PROCEDURE "ADD_RENT_RETURN";
DROP PROCEDURE "ADD_RENT_START";
DROP PROCEDURE "ADD_TOWN";
DROP PROCEDURE "ADD_USER";
DROP FUNCTION "ADDRESS_EXISTS";
DROP FUNCTION "CAN_ADD_INVOICE";
DROP FUNCTION "CAR_EXISTS";
DROP FUNCTION "CAR_TYPE_EXISTS";
DROP FUNCTION "DEPARTMENT_EXISTS";
DROP FUNCTION "GET_ADDRESS";
DROP FUNCTION "GET_CAR";
DROP FUNCTION "GET_CAR_DAILY_RATE";
DROP FUNCTION "GET_CAR_TYPE";
DROP FUNCTION "GET_DEPARTMENT_FROM_RENT";
DROP FUNCTION "GET_MANUFACTURER";
DROP FUNCTION "GET_RENT_DAYS";
DROP FUNCTION "GET_RENT_FOR_RETURN";
DROP FUNCTION "GET_TOWN";
DROP FUNCTION "GET_USER";
DROP FUNCTION "GET_USER_FROM_RENT";
DROP FUNCTION "GET_VAT_RATE";
DROP FUNCTION "MANUFACTURER_EXISTS";
DROP FUNCTION "TOWN_EXISTS";
DROP FUNCTION "USER_EXISTS";
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_ADDRESS
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ID_ADDRESS"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_CAR
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ID_CAR"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_CAR_TYPE
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ID_CAR_TYPE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_DEPARTMENT
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ID_DEPARTMENT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_INVOICE
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ID_INVOICE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_MANUFACTURER
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ID_MANUFACTURER"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_RENT
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ID_RENT"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_TOWN
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ID_TOWN"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ID_USER
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_ID_USER"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_VAT_RATES
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_VAT_RATES"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table ADDRESSES
--------------------------------------------------------

  CREATE TABLE "ADDRESSES" 
   (	"ID_ADDRESS" NUMBER(8,0), 
	"ADDRESS" VARCHAR2(50 BYTE), 
	"TOWNS_ID_TOWN" NUMBER(8,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CARS
--------------------------------------------------------

  CREATE TABLE "CARS" 
   (	"ID_CAR" NUMBER(8,0), 
	"MODEL" VARCHAR2(20 BYTE), 
	"PRODUCTION_YEAR" NUMBER(4,0), 
	"VIN" VARCHAR2(20 BYTE), 
	"SEATS" NUMBER(2,0), 
	"DAILY_RATE" NUMBER, 
	"TECHNICAL_INSPECTION" DATE, 
	"INSURANCE" DATE, 
	"MANUFACTURERS_ID_MANUFACTURER" NUMBER(8,0), 
	"VAT_RATES_ID_VAT" NUMBER(8,0), 
	"DEPARTMENTS_ID_DEPARTMENT" NUMBER(8,0), 
	"CAR_TYPES_ID_CAR_TYPE" NUMBER(8,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CAR_TYPES
--------------------------------------------------------

  CREATE TABLE "CAR_TYPES" 
   (	"ID_CAR_TYPE" NUMBER(8,0), 
	"NAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DEPARTMENTS
--------------------------------------------------------

  CREATE TABLE "DEPARTMENTS" 
   (	"ID_DEPARTMENT" NUMBER(8,0), 
	"NAME" VARCHAR2(50 BYTE), 
	"ADDRESSES_ID_ADDRESS" NUMBER(8,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INVOICES
--------------------------------------------------------

  CREATE TABLE "INVOICES" 
   (	"ID_INVOICE" NUMBER(8,0), 
	"TOTAL_PRICE" NUMBER(8,2), 
	"DAYS" NUMBER(8,0), 
	"INVOICE_DATE" DATE, 
	"DEPARTMENTS_ID_DEPARTMENT" NUMBER(8,0), 
	"USERS_ID_USER" NUMBER(8,0), 
	"RENTS_ID_RENT" NUMBER(8,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MANUFACTURERS
--------------------------------------------------------

  CREATE TABLE "MANUFACTURERS" 
   (	"ID_MANUFACTURER" NUMBER(8,0), 
	"NAME" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table RENTS
--------------------------------------------------------

  CREATE TABLE "RENTS" 
   (	"ID_RENT" NUMBER(8,0), 
	"DATE_START" DATE, 
	"DATE_RETURN" DATE, 
	"MILEAGE_START" NUMBER(8,0), 
	"MILEAGE_END" NUMBER(8,0), 
	"CARS_ID_CAR" NUMBER(8,0), 
	"USERS_ID_USER" NUMBER(8,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TOWNS
--------------------------------------------------------

  CREATE TABLE "TOWNS" 
   (	"ID_TOWN" NUMBER(8,0), 
	"NAME" VARCHAR2(50 BYTE), 
	"POSTCODE" VARCHAR2(6 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "USERS" 
   (	"ID_USER" NUMBER(8,0), 
	"NAME" VARCHAR2(30 BYTE), 
	"SURNAME" VARCHAR2(50 BYTE), 
	"EMAIL" VARCHAR2(50 BYTE), 
	"PHONE" VARCHAR2(9 BYTE), 
	"LICENCE_NUMBER" VARCHAR2(13 BYTE), 
	"ADDRESSES_ID_ADDRESS" NUMBER(8,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table VAT_RATES
--------------------------------------------------------

  CREATE TABLE "VAT_RATES" 
   (	"ID_VAT" NUMBER(8,0), 
	"VAT_RATE" NUMBER(5,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View CARS_BELOW_AVERAGE_PRODUCTION_YEAR
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CARS_BELOW_AVERAGE_PRODUCTION_YEAR" ("MANUFACTURER", "MODEL", "VIN", "PRODUCTION_YEAR", "AVERAGE_YEAR") AS 
  with car_years(average_year) as
    (select avg(production_year) from cars)
select name, model, vin, production_year, average_year from car_years, cars
join manufacturers on manufacturers.id_manufacturer = cars.manufacturers_id_manufacturer
where production_year < average_year
;
--------------------------------------------------------
--  DDL for View CARS_IN_RENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CARS_IN_RENT" ("MANUFACTURER", "MODEL", "VIN", "CUSTOMER_NAME", "CUSTOMER_SURNAME") AS 
  select m.name, c.model, c.vin, u.name, u.surname
from cars c
join manufacturers m on m.id_manufacturer = c.manufacturers_id_manufacturer
join rents r on r.cars_id_car = c.id_car
join users u on u.id_user = r.users_id_user
where r.date_return is null
;
--------------------------------------------------------
--  DDL for View CARS_MILEAGE
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CARS_MILEAGE" ("MANUFACTURER", "MODEL", "VIN", "MILEAGE") AS 
  select m.name, c.model, c.vin, max(r.mileage_end)
from cars c
join rents r on r.cars_id_car = c.id_car
join manufacturers m on m.id_manufacturer = c.manufacturers_id_manufacturer
where r.mileage_end is not null
group by m.name, c.model, c.vin
union
select m.name, c.model, c.vin, max(r.mileage_start)
from cars c
join rents r on r.cars_id_car = c.id_car
join manufacturers m on m.id_manufacturer = c.manufacturers_id_manufacturer
where r.mileage_end is null
group by m.name, c.model, c.vin
;
--------------------------------------------------------
--  DDL for View INSPECTION_DATE_OR_INSURANCE_END_WITHIN_30_DAYS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "INSPECTION_DATE_OR_INSURANCE_END_WITHIN_30_DAYS" ("ID_CAR", "CAR", "VIN", "INSURANCE", "TECHNICAL_INSPECTION") AS 
  select c.id_car, m.name || ' ' || c.model as "CAR", c.vin, c.insurance, c.technical_inspection
from cars c
join manufacturers m on c.manufacturers_id_manufacturer = m.id_manufacturer
where c.insurance - sysdate <= 30
or c.technical_inspection - sysdate <= 30
;
--------------------------------------------------------
--  DDL for View INVOICES_DETAILED
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "INVOICES_DETAILED" ("INVOICE_DATE", "USER_NAME", "USER_SURNAME", "MANUFACTURER", "MODEL", "DAYS_TOTAL", "PRICE_TOTAL") AS 
  select i.invoice_date, u.name, u.surname, m.name, c.model, i.days, i.total_price 
from invoices i
join rents r on i.rents_id_rent = r.id_rent
join cars c on r.cars_id_car = c.id_car
join manufacturers m on c.manufacturers_id_manufacturer = m.id_manufacturer
join users u on u.id_user = i.users_id_user
;
REM INSERTING into ADDRESSES
SET DEFINE OFF;
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('3','UL. ZIELONA 1','3');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('4','UL. ZIELONA 2','3');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('5','UL. ZIELONA 2','4');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('6','UL. DLUGA 7','4');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('7','UL. NOWA 20','5');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('8','UL. LIPOWA 33','6');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('9','UL. JARZYNOWA 10','7');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('10','UL. LIPOWA 77','8');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('11','UL. PODRZECZNA 88','2');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('1','UL. POLNA 20','1');
Insert into ADDRESSES (ID_ADDRESS,ADDRESS,TOWNS_ID_TOWN) values ('2','UL. SZKOLNA 30','2');
REM INSERTING into CARS
SET DEFINE OFF;
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('3','LANCER','2010','5NPDH4AE1DH301414','2','1000',to_date('22/08/05','RR/MM/DD'),to_date('22/08/05','RR/MM/DD'),'3','1','1','5');
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('4','NAVARA','2014','5XYKTDA24BG118198','5','500',to_date('22/10/10','RR/MM/DD'),to_date('22/10/10','RR/MM/DD'),'4','1','1','6');
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('5','UP','2019','1MELM62W5VH692978','4','200',to_date('23/02/15','RR/MM/DD'),to_date('23/02/15','RR/MM/DD'),'5','1','1','1');
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('6','UP','2018','2C3CA6CT3BH562769','4','200',to_date('23/03/10','RR/MM/DD'),to_date('23/03/10','RR/MM/DD'),'5','1','2','1');
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('7','UP','2017','JTDKN3DUXF0328530','4','200',to_date('23/04/25','RR/MM/DD'),to_date('23/04/25','RR/MM/DD'),'5','1','2','1');
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('8','COROLLA','2021','WBAVA33567PV09844','5','300',to_date('22/07/20','RR/MM/DD'),to_date('22/07/20','RR/MM/DD'),'2','1','2','7');
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('9','COROLLA','2022','KMHHU6KH4BU076468','5','300',to_date('22/09/23','RR/MM/DD'),to_date('22/09/23','RR/MM/DD'),'2','1','2','7');
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('10','NAVARA','2013','2GNFLCEK9D6357940','5','500',to_date('22/10/15','RR/MM/DD'),to_date('22/10/15','RR/MM/DD'),'4','1','2','6');
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('1','VITARA','2015','JN8AZ08W23W205781','5','400',to_date('22/12/13','RR/MM/DD'),to_date('22/12/13','RR/MM/DD'),'1','1','1','3');
Insert into CARS (ID_CAR,MODEL,PRODUCTION_YEAR,VIN,SEATS,DAILY_RATE,TECHNICAL_INSPECTION,INSURANCE,MANUFACTURERS_ID_MANUFACTURER,VAT_RATES_ID_VAT,DEPARTMENTS_ID_DEPARTMENT,CAR_TYPES_ID_CAR_TYPE) values ('2','COROLLA','2020','1G1YY36U175102498','5','300',to_date('22/06/25','RR/MM/DD'),to_date('22/06/25','RR/MM/DD'),'2','1','1','7');
REM INSERTING into CAR_TYPES
SET DEFINE OFF;
Insert into CAR_TYPES (ID_CAR_TYPE,NAME) values ('1','HATCHBACK');
Insert into CAR_TYPES (ID_CAR_TYPE,NAME) values ('2','VAN');
Insert into CAR_TYPES (ID_CAR_TYPE,NAME) values ('3','SUV');
Insert into CAR_TYPES (ID_CAR_TYPE,NAME) values ('4','CABRIO');
Insert into CAR_TYPES (ID_CAR_TYPE,NAME) values ('5','RACING');
Insert into CAR_TYPES (ID_CAR_TYPE,NAME) values ('6','PICK-UP');
Insert into CAR_TYPES (ID_CAR_TYPE,NAME) values ('7','SEDAN');
REM INSERTING into DEPARTMENTS
SET DEFINE OFF;
Insert into DEPARTMENTS (ID_DEPARTMENT,NAME,ADDRESSES_ID_ADDRESS) values ('1','CAR-RENTAL-LODZ','10');
Insert into DEPARTMENTS (ID_DEPARTMENT,NAME,ADDRESSES_ID_ADDRESS) values ('2','CAR-RENTAL-GDANSK','11');
REM INSERTING into INVOICES
SET DEFINE OFF;
Insert into INVOICES (ID_INVOICE,TOTAL_PRICE,DAYS,INVOICE_DATE,DEPARTMENTS_ID_DEPARTMENT,USERS_ID_USER,RENTS_ID_RENT) values ('3','4920','4',to_date('22/05/30','RR/MM/DD'),'1','2','5');
Insert into INVOICES (ID_INVOICE,TOTAL_PRICE,DAYS,INVOICE_DATE,DEPARTMENTS_ID_DEPARTMENT,USERS_ID_USER,RENTS_ID_RENT) values ('4','1845','5',to_date('22/05/30','RR/MM/DD'),'2','9','7');
Insert into INVOICES (ID_INVOICE,TOTAL_PRICE,DAYS,INVOICE_DATE,DEPARTMENTS_ID_DEPARTMENT,USERS_ID_USER,RENTS_ID_RENT) values ('5','3075','5',to_date('22/05/30','RR/MM/DD'),'2','10','6');
Insert into INVOICES (ID_INVOICE,TOTAL_PRICE,DAYS,INVOICE_DATE,DEPARTMENTS_ID_DEPARTMENT,USERS_ID_USER,RENTS_ID_RENT) values ('1','4920','10',to_date('22/05/30','RR/MM/DD'),'1','4','3');
Insert into INVOICES (ID_INVOICE,TOTAL_PRICE,DAYS,INVOICE_DATE,DEPARTMENTS_ID_DEPARTMENT,USERS_ID_USER,RENTS_ID_RENT) values ('2','1476','4',to_date('22/05/30','RR/MM/DD'),'1','3','4');
REM INSERTING into MANUFACTURERS
SET DEFINE OFF;
Insert into MANUFACTURERS (ID_MANUFACTURER,NAME) values ('1','SUZUKI');
Insert into MANUFACTURERS (ID_MANUFACTURER,NAME) values ('2','TOYOTA');
Insert into MANUFACTURERS (ID_MANUFACTURER,NAME) values ('3','MITSUBISHI');
Insert into MANUFACTURERS (ID_MANUFACTURER,NAME) values ('4','NISSAN');
Insert into MANUFACTURERS (ID_MANUFACTURER,NAME) values ('5','VOLKSWAGEN');
REM INSERTING into RENTS
SET DEFINE OFF;
Insert into RENTS (ID_RENT,DATE_START,DATE_RETURN,MILEAGE_START,MILEAGE_END,CARS_ID_CAR,USERS_ID_USER) values ('3',to_date('22/05/06','RR/MM/DD'),to_date('22/05/16','RR/MM/DD'),'41345','42987','1','4');
Insert into RENTS (ID_RENT,DATE_START,DATE_RETURN,MILEAGE_START,MILEAGE_END,CARS_ID_CAR,USERS_ID_USER) values ('4',to_date('22/05/20','RR/MM/DD'),to_date('22/05/24','RR/MM/DD'),'24391','25964','2','3');
Insert into RENTS (ID_RENT,DATE_START,DATE_RETURN,MILEAGE_START,MILEAGE_END,CARS_ID_CAR,USERS_ID_USER) values ('5',to_date('22/05/18','RR/MM/DD'),to_date('22/05/22','RR/MM/DD'),'42341','43986','3','2');
Insert into RENTS (ID_RENT,DATE_START,DATE_RETURN,MILEAGE_START,MILEAGE_END,CARS_ID_CAR,USERS_ID_USER) values ('6',to_date('22/04/03','RR/MM/DD'),to_date('22/04/08','RR/MM/DD'),'70432','72356','10','10');
Insert into RENTS (ID_RENT,DATE_START,DATE_RETURN,MILEAGE_START,MILEAGE_END,CARS_ID_CAR,USERS_ID_USER) values ('7',to_date('22/04/13','RR/MM/DD'),to_date('22/04/18','RR/MM/DD'),'86432','88234','9','9');
Insert into RENTS (ID_RENT,DATE_START,DATE_RETURN,MILEAGE_START,MILEAGE_END,CARS_ID_CAR,USERS_ID_USER) values ('8',to_date('22/04/15','RR/MM/DD'),to_date('22/04/23','RR/MM/DD'),'63643','64365','8','8');
Insert into RENTS (ID_RENT,DATE_START,DATE_RETURN,MILEAGE_START,MILEAGE_END,CARS_ID_CAR,USERS_ID_USER) values ('9',to_date('22/05/08','RR/MM/DD'),to_date('22/05/18','RR/MM/DD'),'14578','15798','7','7');
Insert into RENTS (ID_RENT,DATE_START,DATE_RETURN,MILEAGE_START,MILEAGE_END,CARS_ID_CAR,USERS_ID_USER) values ('1',to_date('22/05/01','RR/MM/DD'),null,'20345',null,'5','6');
Insert into RENTS (ID_RENT,DATE_START,DATE_RETURN,MILEAGE_START,MILEAGE_END,CARS_ID_CAR,USERS_ID_USER) values ('2',to_date('22/05/03','RR/MM/DD'),null,'32345',null,'4','5');
REM INSERTING into TOWNS
SET DEFINE OFF;
Insert into TOWNS (ID_TOWN,NAME,POSTCODE) values ('3','WARSZAWA','11-111');
Insert into TOWNS (ID_TOWN,NAME,POSTCODE) values ('4','POZNAN','22-000');
Insert into TOWNS (ID_TOWN,NAME,POSTCODE) values ('5','LODZ','33-222');
Insert into TOWNS (ID_TOWN,NAME,POSTCODE) values ('6','LODZ','33-333');
Insert into TOWNS (ID_TOWN,NAME,POSTCODE) values ('7','SZCZECIN','77-000');
Insert into TOWNS (ID_TOWN,NAME,POSTCODE) values ('8','LODZ','33-000');
Insert into TOWNS (ID_TOWN,NAME,POSTCODE) values ('1','LODZ','33-111');
Insert into TOWNS (ID_TOWN,NAME,POSTCODE) values ('2','GDANSK','44-111');
REM INSERTING into USERS
SET DEFINE OFF;
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('3','JAN','KOWALSKI','nxelstecom@tyonyihi.com','769464228','43243/45/4323','3');
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('4','JANINA','KOWALSKA','axrlyev@singmails.com','771618130','87654/23/7654','3');
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('5','WIKTOR','MALINOWSKI','fact00@docsr.site','921156446','98743/67/8735','4');
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('6','JERZY','KILER','bigdtraveler2@athdn.com','854335390','09874/86/8965','5');
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('7','LUCJAN','WOJDA','konjevic@visieonl.com','848254583','23455/35/2345','6');
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('8','STEFAN','KOSIOREK','rogerpd@usayoman.com','686470743','98766/12/7674','7');
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('9','MARIA','DABROWSKA','andrianz7@mobilm.site','797811157','80987/83/7856','8');
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('10','KRZYSZTOF','JARZYNA','motis766@burgas.vip','984810541','44576/38/2345','9');
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('1','MARIAN','GRACZYK','serefcs@baanr.com','573153291','43244/86/3744','1');
Insert into USERS (ID_USER,NAME,SURNAME,EMAIL,PHONE,LICENCE_NUMBER,ADDRESSES_ID_ADDRESS) values ('2','BARBARA','WISNIEWSKA','barylow@packiu.com','648763418','34557/57/0987','2');
REM INSERTING into VAT_RATES
SET DEFINE OFF;
Insert into VAT_RATES (ID_VAT,VAT_RATE) values ('1','0,23');
--------------------------------------------------------
--  DDL for Index ADDRESSES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADDRESSES_PK" ON "ADDRESSES" ("ID_ADDRESS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CARS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CARS_PK" ON "CARS" ("ID_CAR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CARS_VIN_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "CARS_VIN_UN" ON "CARS" ("VIN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CAR_TYPES_NAME_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "CAR_TYPES_NAME_UN" ON "CAR_TYPES" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CAR_TYPES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CAR_TYPES_PK" ON "CAR_TYPES" ("ID_CAR_TYPE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index DEPARTMENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEPARTMENTS_PK" ON "DEPARTMENTS" ("ID_DEPARTMENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index INVOICES__IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "INVOICES__IDX" ON "INVOICES" ("RENTS_ID_RENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index INVOICES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INVOICES_PK" ON "INVOICES" ("ID_INVOICE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MANUFACTURERS_NAME_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "MANUFACTURERS_NAME_UN" ON "MANUFACTURERS" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MANUFACTURERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MANUFACTURERS_PK" ON "MANUFACTURERS" ("ID_MANUFACTURER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index RENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "RENTS_PK" ON "RENTS" ("ID_RENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TOWNS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TOWNS_PK" ON "TOWNS" ("ID_TOWN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TOWNS_POSTCODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "TOWNS_POSTCODE_UN" ON "TOWNS" ("POSTCODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_LICENCE_NUMBER_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "USERS_LICENCE_NUMBER_UN" ON "USERS" ("LICENCE_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USERS_PK" ON "USERS" ("ID_USER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index VAT_RATES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAT_RATES_PK" ON "VAT_RATES" ("ID_VAT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index VAT_RATES_VAT_RATE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAT_RATES_VAT_RATE_UN" ON "VAT_RATES" ("VAT_RATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ADDRESSES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADDRESSES_PK" ON "ADDRESSES" ("ID_ADDRESS") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CARS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CARS_PK" ON "CARS" ("ID_CAR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CARS_VIN_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "CARS_VIN_UN" ON "CARS" ("VIN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CAR_TYPES_NAME_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "CAR_TYPES_NAME_UN" ON "CAR_TYPES" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CAR_TYPES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CAR_TYPES_PK" ON "CAR_TYPES" ("ID_CAR_TYPE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index DEPARTMENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEPARTMENTS_PK" ON "DEPARTMENTS" ("ID_DEPARTMENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index INVOICES__IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "INVOICES__IDX" ON "INVOICES" ("RENTS_ID_RENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index INVOICES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "INVOICES_PK" ON "INVOICES" ("ID_INVOICE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MANUFACTURERS_NAME_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "MANUFACTURERS_NAME_UN" ON "MANUFACTURERS" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MANUFACTURERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MANUFACTURERS_PK" ON "MANUFACTURERS" ("ID_MANUFACTURER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index RENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "RENTS_PK" ON "RENTS" ("ID_RENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TOWNS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "TOWNS_PK" ON "TOWNS" ("ID_TOWN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TOWNS_POSTCODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "TOWNS_POSTCODE_UN" ON "TOWNS" ("POSTCODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_LICENCE_NUMBER_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "USERS_LICENCE_NUMBER_UN" ON "USERS" ("LICENCE_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USERS_PK" ON "USERS" ("ID_USER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index VAT_RATES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAT_RATES_PK" ON "VAT_RATES" ("ID_VAT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index VAT_RATES_VAT_RATE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "VAT_RATES_VAT_RATE_UN" ON "VAT_RATES" ("VAT_RATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger TRG_ADDRESS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_ADDRESS" 
before insert or update on addresses
for each row

begin

    if :new.id_address is null then
        :new.id_address := seq_id_address.nextval;
    end if;

    :new.address := upper(:new.address);
end;


/
ALTER TRIGGER "TRG_ADDRESS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_CARS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_CARS" 
before insert or update on cars
for each row

begin
    if not REGEXP_LIKE(:new.vin, '[[:alnum:]]{17}') then
        raise_application_error(-20010, 'Incorrect VIN input.');
    end if;

    if :new.production_year > to_char(sysdate, 'yyyy') then
        raise_application_error(-20011, 'Production date from future.');
    end if;

    if :new.production_year < '2000' then
        raise_application_error(-20014, 'Production date too distant.');
    end if;

    if :new.technical_inspection < sysdate then
        raise_application_error(-20012, 'Technical inspection date from past.');
    end if;

    if :new.technical_inspection - sysdate > 366 then
        raise_application_error(-20017, 'Technical inspection date too distant.');
    end if;

    if :new.insurance < sysdate then
        raise_application_error(-20013, 'Insurance date from past.');
    end if;

    if :new.technical_inspection - sysdate > 366 then
        raise_application_error(-20018, 'Insurance date too distant.');
    end if;

    if :new.daily_rate < 0 then
        raise_application_error(-20015, 'Daily rate negative.');
    end if;

    if :new.daily_rate > 5000 then
        raise_application_error(-20016, 'Daily rate too high.');
    end if;

    if :new.id_car is null then
        :new.id_car := SEQ_ID_CAR.nextval;
    end if;

    :new.model := upper(:new.model);
    :new.vin := upper(:new.vin);
end;


/
ALTER TRIGGER "TRG_CARS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_CAR_TYPES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_CAR_TYPES" 
before insert or update on car_types
for each row

begin
    if not REGEXP_LIKE(:new.name, '[[:alpha:]]+') then
        raise_application_error(-20002, 'Incorrect car type.');
    end if;

    if :new.id_car_type is null then
        :new.id_car_type := SEQ_ID_CAR_TYPE.nextval;
    end if;

    :new.name := upper(:new.name);
end;


/
ALTER TRIGGER "TRG_CAR_TYPES" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DEPARTMENTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_DEPARTMENTS" 
before insert or update on departments
for each row

begin

    if :new.id_department is null then
        :new.id_department := seq_id_department.nextval;
    end if;

    :new.name := upper(:new.name);
end;


/
ALTER TRIGGER "TRG_DEPARTMENTS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_MANUFACTURERS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_MANUFACTURERS" 
before insert or update on manufacturers
for each row

begin
    if :new.id_manufacturer is null then
        :new.id_manufacturer := SEQ_ID_MANUFACTURER.nextval;
    end if;

    :new.name := upper(:new.name);
end;


/
ALTER TRIGGER "TRG_MANUFACTURERS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_RENTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_RENTS" 
before insert or update on rents
for each row

begin

    if :new.date_start > :new.date_return then
        raise_application_error(-20021, 'End date cannot be earlier than start date.');
    end if;

    if :new.mileage_start > :new.mileage_end then
        raise_application_error(-20022, 'End mileage cannot be lower than start mileage.');
    end if;

    if :new.mileage_start < :old.mileage_start then
        raise_application_error(-20023, 'New start mileage cannot be lower than old start mileage.');
    end if;

    if :new.mileage_end < :old.mileage_end then
        raise_application_error(-20024, 'New end mileage cannot be lower than old end mileage.');
    end if;

    if :new.id_rent is null then
        :new.id_rent := SEQ_ID_RENT.nextval;
    end if;

end;


/
ALTER TRIGGER "TRG_RENTS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_TOWNS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_TOWNS" 
before insert or update on towns
for each row

begin
    if not REGEXP_LIKE(:new.postcode, '[[:digit:]]{2}-[[:digit:]]{3}') then
        raise_application_error(-20003, 'Incorrect postcode format.');
    end if;

    if :new.id_town is null then
        :new.id_town := seq_id_town.nextval;
    end if;

    :new.name := upper(:new.name);
end;


/
ALTER TRIGGER "TRG_TOWNS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_USER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_USER" 
before insert or update on users
for each row

begin
    if not REGEXP_LIKE(:new.name, '[[:alpha:]]+') then
        raise_application_error(-20005, 'Incorrect name input.');
    end if;
    if not REGEXP_LIKE(:new.surname, '[[:alpha:]]+') then
        raise_application_error(-20006, 'Incorrect surname input.');
    end if;
    if not REGEXP_LIKE(:new.email, '[[:alnum:]]{1,}(\.[[:alnum:]]{1,})?@[[:alnum:]]{1,}\.[[:alpha:]]{2,4}') then
        raise_application_error(-20007, 'Incorrect email input.');
    end if;
    if not REGEXP_LIKE(:new.phone, '[[:digit:]]{9}') then
        raise_application_error(-20008, 'Incorrect phone input.');
    end if;
    if not REGEXP_LIKE(:new.licence_number, '[[:digit:]]{5}/[[:digit:]]{2}/[[:digit:]]{4}') then
        raise_application_error(-20009, 'Incorrect licence number input.');
    end if;
    if :new.id_user is null then
        :new.id_user := seq_id_user.nextval;
    end if;

    :new.name := upper(:new.name);
    :new.surname := upper(:new.surname);
    :new.email := lower(:new.email);
end;


/
ALTER TRIGGER "TRG_USER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_VAT_RATES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_VAT_RATES" 
before insert or update on vat_rates
for each row

begin
    if :new.vat_rate > 1 or :new.vat_rate < 0 then
        raise_application_error(-20001, 'Incorrect vat rate scope.');
    end if;

    if :new.id_vat is null then
        :new.id_vat := SEQ_VAT_RATES.nextval;
    end if;
end;


/
ALTER TRIGGER "TRG_VAT_RATES" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_ADDRESS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_ADDRESS" 
before insert or update on addresses
for each row

begin

    if :new.id_address is null then
        :new.id_address := seq_id_address.nextval;
    end if;

    :new.address := upper(:new.address);
end;


/
ALTER TRIGGER "TRG_ADDRESS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_CARS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_CARS" 
before insert or update on cars
for each row

begin
    if not REGEXP_LIKE(:new.vin, '[[:alnum:]]{17}') then
        raise_application_error(-20010, 'Incorrect VIN input.');
    end if;

    if :new.production_year > to_char(sysdate, 'yyyy') then
        raise_application_error(-20011, 'Production date from future.');
    end if;

    if :new.production_year < '2000' then
        raise_application_error(-20014, 'Production date too distant.');
    end if;

    if :new.technical_inspection < sysdate then
        raise_application_error(-20012, 'Technical inspection date from past.');
    end if;

    if :new.technical_inspection - sysdate > 366 then
        raise_application_error(-20017, 'Technical inspection date too distant.');
    end if;

    if :new.insurance < sysdate then
        raise_application_error(-20013, 'Insurance date from past.');
    end if;

    if :new.technical_inspection - sysdate > 366 then
        raise_application_error(-20018, 'Insurance date too distant.');
    end if;

    if :new.daily_rate < 0 then
        raise_application_error(-20015, 'Daily rate negative.');
    end if;

    if :new.daily_rate > 5000 then
        raise_application_error(-20016, 'Daily rate too high.');
    end if;

    if :new.id_car is null then
        :new.id_car := SEQ_ID_CAR.nextval;
    end if;

    :new.model := upper(:new.model);
    :new.vin := upper(:new.vin);
end;


/
ALTER TRIGGER "TRG_CARS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_CAR_TYPES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_CAR_TYPES" 
before insert or update on car_types
for each row

begin
    if not REGEXP_LIKE(:new.name, '[[:alpha:]]+') then
        raise_application_error(-20002, 'Incorrect car type.');
    end if;

    if :new.id_car_type is null then
        :new.id_car_type := SEQ_ID_CAR_TYPE.nextval;
    end if;

    :new.name := upper(:new.name);
end;


/
ALTER TRIGGER "TRG_CAR_TYPES" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DEPARTMENTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_DEPARTMENTS" 
before insert or update on departments
for each row

begin

    if :new.id_department is null then
        :new.id_department := seq_id_department.nextval;
    end if;

    :new.name := upper(:new.name);
end;


/
ALTER TRIGGER "TRG_DEPARTMENTS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_MANUFACTURERS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_MANUFACTURERS" 
before insert or update on manufacturers
for each row

begin
    if :new.id_manufacturer is null then
        :new.id_manufacturer := SEQ_ID_MANUFACTURER.nextval;
    end if;

    :new.name := upper(:new.name);
end;


/
ALTER TRIGGER "TRG_MANUFACTURERS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_RENTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_RENTS" 
before insert or update on rents
for each row

begin

    if :new.date_start > :new.date_return then
        raise_application_error(-20021, 'End date cannot be earlier than start date.');
    end if;

    if :new.mileage_start > :new.mileage_end then
        raise_application_error(-20022, 'End mileage cannot be lower than start mileage.');
    end if;

    if :new.mileage_start < :old.mileage_start then
        raise_application_error(-20023, 'New start mileage cannot be lower than old start mileage.');
    end if;

    if :new.mileage_end < :old.mileage_end then
        raise_application_error(-20024, 'New end mileage cannot be lower than old end mileage.');
    end if;

    if :new.id_rent is null then
        :new.id_rent := SEQ_ID_RENT.nextval;
    end if;

end;


/
ALTER TRIGGER "TRG_RENTS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_TOWNS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_TOWNS" 
before insert or update on towns
for each row

begin
    if not REGEXP_LIKE(:new.postcode, '[[:digit:]]{2}-[[:digit:]]{3}') then
        raise_application_error(-20003, 'Incorrect postcode format.');
    end if;

    if :new.id_town is null then
        :new.id_town := seq_id_town.nextval;
    end if;

    :new.name := upper(:new.name);
end;


/
ALTER TRIGGER "TRG_TOWNS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_USER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_USER" 
before insert or update on users
for each row

begin
    if not REGEXP_LIKE(:new.name, '[[:alpha:]]+') then
        raise_application_error(-20005, 'Incorrect name input.');
    end if;
    if not REGEXP_LIKE(:new.surname, '[[:alpha:]]+') then
        raise_application_error(-20006, 'Incorrect surname input.');
    end if;
    if not REGEXP_LIKE(:new.email, '[[:alnum:]]{1,}(\.[[:alnum:]]{1,})?@[[:alnum:]]{1,}\.[[:alpha:]]{2,4}') then
        raise_application_error(-20007, 'Incorrect email input.');
    end if;
    if not REGEXP_LIKE(:new.phone, '[[:digit:]]{9}') then
        raise_application_error(-20008, 'Incorrect phone input.');
    end if;
    if not REGEXP_LIKE(:new.licence_number, '[[:digit:]]{5}/[[:digit:]]{2}/[[:digit:]]{4}') then
        raise_application_error(-20009, 'Incorrect licence number input.');
    end if;
    if :new.id_user is null then
        :new.id_user := seq_id_user.nextval;
    end if;

    :new.name := upper(:new.name);
    :new.surname := upper(:new.surname);
    :new.email := lower(:new.email);
end;


/
ALTER TRIGGER "TRG_USER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_VAT_RATES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_VAT_RATES" 
before insert or update on vat_rates
for each row

begin
    if :new.vat_rate > 1 or :new.vat_rate < 0 then
        raise_application_error(-20001, 'Incorrect vat rate scope.');
    end if;

    if :new.id_vat is null then
        :new.id_vat := SEQ_VAT_RATES.nextval;
    end if;
end;


/
ALTER TRIGGER "TRG_VAT_RATES" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ADD_ADDRESS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_ADDRESS" (user_address varchar2, town_name varchar2, postcode varchar2, address_id out number)
as
    data_exists_town boolean;
    town_id number;

begin
    address_id := address_exists(user_address, postcode);

    if address_id = 0 then
        data_exists_town := town_exists(postcode);

        if data_exists_town = false then
            add_town(town_name, postcode);
        end if;

        town_id := get_town(postcode);

        address_id := SEQ_ID_ADDRESS.nextval;

        insert into addresses values(address_id, user_address, town_id);
        dbms_output.put_line('Address add succeeded');
        commit;
    else
        dbms_output.put_line('Address already in database');
    end if;

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_CAR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_CAR" (manufacturer varchar2, car_model varchar2, car_year number,
    car_vin varchar2, car_seats number, car_rate number, car_inspection date,
    car_insurance date, department_id number, car_type_id number)
as
    data_exists_car boolean;
    id_manufacturer number;

begin
    data_exists_car := car_exists(car_vin);

    if data_exists_car = false then
        add_manufacturer(manufacturer);
        id_manufacturer := get_manufacturer(manufacturer);

        insert into cars values
        (SEQ_ID_CAR.nextval, car_model, car_year, car_vin, car_seats, car_rate, car_inspection, car_insurance, id_manufacturer, 1, department_id, car_type_id);
        dbms_output.put_line('Car add succeeded.');
        commit;
    else
        dbms_output.put_line('Car already in database.');
    end if;

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_CAR_TYPE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_CAR_TYPE" (t_name varchar2)
as
    data_exists_car_type boolean;
begin
    data_exists_car_type := car_type_exists(t_name);

    if data_exists_car_type = false then
        insert into car_types(name) values(t_name);
        dbms_output.put_line('Car type add succeeded.');
        commit;
    else
        dbms_output.put_line('Car type already in database.');
    end if;


exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_DEPARTMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_DEPARTMENT" (department_name varchar2, adress varchar2, town_name varchar2, postcode varchar2)
as
    data_exists_department boolean;
    address_id number;

begin
    data_exists_department := department_exists(department_name, postcode);

    if data_exists_department = false then
        add_address(adress, town_name, postcode, address_id);

        insert into departments(name, addresses_id_address) values(department_name, address_id);
        dbms_output.put_line('Department add succeeded');
        commit;
    else
        dbms_output.put_line('Department already in database');
    end if;

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_INVOICE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_INVOICE" (user_rent_id number)
as
    id_rent number;
    total_price number;
    rented_car_rate number;
    total_days number;
    department_id number;
    user_id number;
    check_can_add_invoice boolean;
begin

    check_can_add_invoice := can_add_invoice(user_rent_id);

    if check_can_add_invoice = true then
        total_days := get_rent_days(user_rent_id);
        rented_car_rate := get_car_daily_rate(user_rent_id);
        total_price := total_days * rented_car_rate + total_days * rented_car_rate * get_vat_rate(user_rent_id);
        department_id := get_department_from_rent(user_rent_id);
        user_id := get_user_from_rent(user_rent_id);

        insert into invoices values(seq_id_invoice.nextval, total_price, total_days, sysdate, department_id, user_id, user_rent_id);
        dbms_output.put_line('Invoice add succeeded.');
        commit;
    else
        dbms_output.put_line('Cannot add invoice.');
    end if;

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_MANUFACTURER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_MANUFACTURER" (m_name varchar2)
as
    data_exists_manufacturer boolean;
begin
    data_exists_manufacturer := manufacturer_exists(m_name);

    if data_exists_manufacturer = false then
        insert into manufacturers(name) values(m_name);
        dbms_output.put_line('Manufacturer add succeeded.');
        commit;
    else
        dbms_output.put_line('Manufacturer already in database.');
    end if;

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_RENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_RENT" (rent_start date, rent_end date, car_mileage_start number, car_mileage_end number, car_vin varchar2, user_licence varchar2)
as
    id_car number;
    id_user number;
begin
    if user_exists(user_licence) = false then
        raise_application_error(-20019, 'User not existing in database');
    end if;
    if car_exists(car_vin) = false then
        raise_application_error(-20020, 'Car not existing in database');
    end if;

    id_car := get_car(car_vin);
    id_user := get_user(user_licence);

    insert into rents values(SEQ_ID_RENT.nextval, rent_start, rent_end, car_mileage_start, car_mileage_end, id_car, id_user);
    dbms_output.put_line('Rent add succeeded.');
    commit;

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_RENT_RETURN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_RENT_RETURN" (rent_end date, car_mileage_end number, car_vin varchar2, user_licence varchar2)
as
    id_car number;
    id_user number;
    id_rent_for_retrun number;

begin
    if user_exists(user_licence) = false then
        raise_application_error(-20019, 'User not existing in database');
    end if;
    if car_exists(car_vin) = false then
        raise_application_error(-20020, 'Car not existing in database');
    end if;

    id_car := get_car(car_vin);
    id_user := get_user(user_licence);
    id_rent_for_retrun := get_rent_for_return(car_vin, user_licence);

    update rents r set r.date_return = rent_end, r.mileage_end = car_mileage_end
    where r.id_rent = id_rent_for_retrun;
    dbms_output.put_line('Rent return succeeded.');
    commit;

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_RENT_START
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_RENT_START" (rent_start date, car_mileage_start number, car_vin varchar2, user_licence varchar2)
as
    id_car number;
    id_user number;
begin
    if user_exists(user_licence) = false then
        raise_application_error(-20019, 'User not existing in database');
    end if;
    if car_exists(car_vin) = false then
        raise_application_error(-20020, 'Car not existing in database');
    end if;

    id_car := get_car(car_vin);
    id_user := get_user(user_licence);

    insert into rents(date_start, mileage_start, cars_id_car, users_id_user) values(rent_start, car_mileage_start, id_car, id_user);
    dbms_output.put_line('Rent add succeeded.');
    commit;  

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_TOWN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_TOWN" (town_name varchar2, town_postcode varchar2)
as
    data_exists_town boolean;

begin
    data_exists_town := town_exists(town_postcode);

    if data_exists_town = false then
        insert into towns values(seq_id_town.nextval, town_name, town_postcode);
        dbms_output.put_line('Town add succeeded');
        commit;
    else
        dbms_output.put_line('Town already in database');
    end if;

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Procedure ADD_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ADD_USER" (user_name varchar2, user_surname varchar2, user_email varchar2,
    user_phone varchar2, user_licence_number varchar2, address varchar2, town_name varchar2, postcode varchar2)
is
    data_exists_user boolean;
    address_id number;

begin
    data_exists_user := user_exists(user_licence_number);

    if data_exists_user = false then
        add_address(address, town_name, postcode, address_id);

        insert into users(name, surname, email, phone, licence_number, addresses_id_address)
        values(user_name, user_surname, user_email, user_phone, user_licence_number, address_id);
        dbms_output.put_line('User add succeeded');
        commit;
    else
        dbms_output.put_line('User already in database');
    end if;

exception
    when others then
    dbms_output.put_line(sqlerrm);
    rollback;
end;

/
--------------------------------------------------------
--  DDL for Function ADDRESS_EXISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ADDRESS_EXISTS" (user_address varchar2, town_postcode varchar2)
return number
is
    address_id number;

begin
    select id_address into address_id from addresses a
    join towns t on a.towns_id_town = t.id_town
    where a.address = upper(user_address)
    and t.postcode = town_postcode;

    return address_id;

exception
    when others then return 0;

end;



/
--------------------------------------------------------
--  DDL for Function CAN_ADD_INVOICE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CAN_ADD_INVOICE" (user_rent_id number)
return boolean
is
    invoice_counter number;

begin

    select count(*) into invoice_counter
    from rents
    where id_rent = user_rent_id
    and date_return is not null;

    if invoice_counter > 0 then
        return true;
    end if;

    return false;
end;



/
--------------------------------------------------------
--  DDL for Function CAR_EXISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CAR_EXISTS" (car_vin varchar2)
return boolean
is
    car_counter number;
begin
    select count(*) into car_counter
    from cars c
    where c.vin = car_vin;

    if car_counter > 0 then
        return true;
    end if;

    return false;
end;



/
--------------------------------------------------------
--  DDL for Function CAR_TYPE_EXISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CAR_TYPE_EXISTS" (t_name varchar2)
return boolean
is
    car_type_counter number;

begin
    select count(*) into car_type_counter
    from car_types c
    where c.name = upper(t_name);

    if car_type_counter > 0 then
        return true;
    end if;

    return false;
end;



/
--------------------------------------------------------
--  DDL for Function DEPARTMENT_EXISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEPARTMENT_EXISTS" (department_name varchar2, department_postcode varchar2)
return boolean
is
    department_counter number;

begin
    select count(*) into department_counter
    from departments d
    join addresses a on d.addresses_id_address = a.id_address
    join towns t on a.towns_id_town = t.id_town
    where d.name = department_name
    and t.postcode = department_postcode;

    if department_counter > 0 then
        return true;
    end if;

    return false;
end;



/
--------------------------------------------------------
--  DDL for Function GET_ADDRESS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_ADDRESS" (user_address varchar2, town_postcode varchar2)
return number
is
    id_current_address number;

begin
    select id_address into id_current_address from addresses a
    join towns t on t.id_town = a.towns_id_town
    where a.address = upper(user_address)
    and t.postcode = town_postcode;

    return id_current_address;
end;



/
--------------------------------------------------------
--  DDL for Function GET_CAR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_CAR" (car_vin varchar2)
return number
is
    car_id number;

begin
    select c.id_car into car_id
    from cars c
    where c.vin = car_vin;

    return car_id;
end;



/
--------------------------------------------------------
--  DDL for Function GET_CAR_DAILY_RATE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_CAR_DAILY_RATE" (user_rent_id number)
return number
is
    car_daily_rate number;

begin

    select c.daily_rate into car_daily_rate
    from rents r
    join cars c on r.cars_id_car = c.id_car
    where r.id_rent = user_rent_id;

    return car_daily_rate;
end;



/
--------------------------------------------------------
--  DDL for Function GET_CAR_TYPE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_CAR_TYPE" (type_name varchar2)
return number
is
    type_id number;

begin
    select id_car_type into type_id
    from car_types c
    where c.name = type_name;

    return type_id;
end;



/
--------------------------------------------------------
--  DDL for Function GET_DEPARTMENT_FROM_RENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_DEPARTMENT_FROM_RENT" (user_rent_id number)
return number
is
    department_id number;
    car_from_rent_id number;

begin
    select c.id_car into car_from_rent_id
    from cars c
    join rents r on r.cars_id_car = c.id_car
    where r.id_rent = user_rent_id;

    select d.id_department into department_id
    from departments d
    join cars c on c.departments_id_department = d.id_department
    join rents r on r.cars_id_car = c.id_car
    where c.id_car = car_from_rent_id
    fetch first 1 row only;

    return department_id;
end;



/
--------------------------------------------------------
--  DDL for Function GET_MANUFACTURER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_MANUFACTURER" (manufacturer_name varchar2)
return number
is
    manufacturer_id number;

begin
    select id_manufacturer into manufacturer_id
    from manufacturers m
    where m.name = upper(manufacturer_name);

    return manufacturer_id;
end;



/
--------------------------------------------------------
--  DDL for Function GET_RENT_DAYS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_RENT_DAYS" (user_rent_id number)
return number
is
    rent_days number;
    start_date date;
    end_date date;
begin

    select r.date_start into start_date
    from rents r
    where r.id_rent = user_rent_id;

    select r.date_return into end_date
    from rents r
    where r.id_rent = user_rent_id;

    rent_days := end_date - start_date;

    return rent_days;
end;



/
--------------------------------------------------------
--  DDL for Function GET_RENT_FOR_RETURN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_RENT_FOR_RETURN" (car_vin varchar2, user_licence varchar2)
return number
is
    rent_id number;

begin
    select r.id_rent into rent_id
    from rents r
    join users u on r.users_id_user = u.id_user
    join cars c on r.cars_id_car = c.id_car
    where c.vin = car_vin
    and u.licence_number = user_licence
    and r.date_return is null;

    return rent_id;
exception
    when others then
    raise_application_error(-20025, 'Data not found');
end;



/
--------------------------------------------------------
--  DDL for Function GET_TOWN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_TOWN" (town_postcode varchar2)
return number
as
    id_current_town number;

begin
    select id_town into id_current_town from towns t
    where t.postcode = town_postcode;

    return id_current_town;
end;



/
--------------------------------------------------------
--  DDL for Function GET_USER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_USER" (user_licence varchar2)
return number
is
    user_id number;

begin
    select u.id_user into user_id
    from users u
    where u.licence_number = user_licence;

    return user_id;
end;



/
--------------------------------------------------------
--  DDL for Function GET_USER_FROM_RENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_USER_FROM_RENT" (user_rent_id number)
return number
is
    user_id number;

begin

    select u.id_user into user_id
    from users u
    join rents r on r.users_id_user = u.id_user
    where r.id_rent = user_rent_id;

    return user_id;
end;



/
--------------------------------------------------------
--  DDL for Function GET_VAT_RATE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_VAT_RATE" (user_rent_id number)
return number
is
    rate number;

begin
    select vat_rate into rate
    from vat_rates v
    join cars c on c.vat_rates_id_vat = v.id_vat
    join rents r on r.cars_id_car = c.id_car
    where r.id_rent = user_rent_id;

    return rate;
end;

/
--------------------------------------------------------
--  DDL for Function MANUFACTURER_EXISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MANUFACTURER_EXISTS" (m_name varchar2)
return boolean
is
    manufacturer_counter number;

begin
    select count(*) into manufacturer_counter
    from manufacturers m
    where m.name = upper(m_name);

    if manufacturer_counter > 0 then
        return true;
    end if;

    return false;
end;



/
--------------------------------------------------------
--  DDL for Function TOWN_EXISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "TOWN_EXISTS" (town_postcode varchar2)
return boolean
is
    town_counter number;

begin
    select count(*) into town_counter from towns t
    where t.postcode = town_postcode;

    if town_counter > 0 then
        return true;
    end if;

    return false;
end;



/
--------------------------------------------------------
--  DDL for Function USER_EXISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "USER_EXISTS" (user_licence_number varchar2)
return boolean
is
    user_counter number;

begin
    select count(*) into user_counter from users u
    where u.licence_number = user_licence_number;

    if user_counter > 0 then
        return true;
    end if;

    return false;
end;



/
--------------------------------------------------------
--  Constraints for Table ADDRESSES
--------------------------------------------------------

  ALTER TABLE "ADDRESSES" MODIFY ("ID_ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "ADDRESSES" MODIFY ("ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "ADDRESSES" MODIFY ("TOWNS_ID_TOWN" NOT NULL ENABLE);
  ALTER TABLE "ADDRESSES" ADD CONSTRAINT "ADDRESSES_PK" PRIMARY KEY ("ID_ADDRESS")
  USING INDEX "ADDRESSES_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CARS
--------------------------------------------------------

  ALTER TABLE "CARS" MODIFY ("ID_CAR" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("PRODUCTION_YEAR" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("VIN" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("SEATS" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("DAILY_RATE" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("TECHNICAL_INSPECTION" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("INSURANCE" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("MANUFACTURERS_ID_MANUFACTURER" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("VAT_RATES_ID_VAT" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("DEPARTMENTS_ID_DEPARTMENT" NOT NULL ENABLE);
  ALTER TABLE "CARS" MODIFY ("CAR_TYPES_ID_CAR_TYPE" NOT NULL ENABLE);
  ALTER TABLE "CARS" ADD CONSTRAINT "CARS_PK" PRIMARY KEY ("ID_CAR")
  USING INDEX "CARS_PK"  ENABLE;
  ALTER TABLE "CARS" ADD CONSTRAINT "CARS_VIN_UN" UNIQUE ("VIN")
  USING INDEX "CARS_VIN_UN"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CAR_TYPES
--------------------------------------------------------

  ALTER TABLE "CAR_TYPES" MODIFY ("ID_CAR_TYPE" NOT NULL ENABLE);
  ALTER TABLE "CAR_TYPES" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "CAR_TYPES" ADD CONSTRAINT "CAR_TYPES_PK" PRIMARY KEY ("ID_CAR_TYPE")
  USING INDEX "CAR_TYPES_PK"  ENABLE;
  ALTER TABLE "CAR_TYPES" ADD CONSTRAINT "CAR_TYPES_NAME_UN" UNIQUE ("NAME")
  USING INDEX "CAR_TYPES_NAME_UN"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DEPARTMENTS
--------------------------------------------------------

  ALTER TABLE "DEPARTMENTS" MODIFY ("ID_DEPARTMENT" NOT NULL ENABLE);
  ALTER TABLE "DEPARTMENTS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "DEPARTMENTS" MODIFY ("ADDRESSES_ID_ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "DEPARTMENTS" ADD CONSTRAINT "DEPARTMENTS_PK" PRIMARY KEY ("ID_DEPARTMENT")
  USING INDEX "DEPARTMENTS_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table INVOICES
--------------------------------------------------------

  ALTER TABLE "INVOICES" MODIFY ("ID_INVOICE" NOT NULL ENABLE);
  ALTER TABLE "INVOICES" MODIFY ("TOTAL_PRICE" NOT NULL ENABLE);
  ALTER TABLE "INVOICES" MODIFY ("DAYS" NOT NULL ENABLE);
  ALTER TABLE "INVOICES" MODIFY ("INVOICE_DATE" NOT NULL ENABLE);
  ALTER TABLE "INVOICES" MODIFY ("DEPARTMENTS_ID_DEPARTMENT" NOT NULL ENABLE);
  ALTER TABLE "INVOICES" MODIFY ("USERS_ID_USER" NOT NULL ENABLE);
  ALTER TABLE "INVOICES" MODIFY ("RENTS_ID_RENT" NOT NULL ENABLE);
  ALTER TABLE "INVOICES" ADD CONSTRAINT "INVOICES_PK" PRIMARY KEY ("ID_INVOICE")
  USING INDEX "INVOICES_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MANUFACTURERS
--------------------------------------------------------

  ALTER TABLE "MANUFACTURERS" MODIFY ("ID_MANUFACTURER" NOT NULL ENABLE);
  ALTER TABLE "MANUFACTURERS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MANUFACTURERS" ADD CONSTRAINT "MANUFACTURERS_PK" PRIMARY KEY ("ID_MANUFACTURER")
  USING INDEX "MANUFACTURERS_PK"  ENABLE;
  ALTER TABLE "MANUFACTURERS" ADD CONSTRAINT "MANUFACTURERS_NAME_UN" UNIQUE ("NAME")
  USING INDEX "MANUFACTURERS_NAME_UN"  ENABLE;
--------------------------------------------------------
--  Constraints for Table RENTS
--------------------------------------------------------

  ALTER TABLE "RENTS" MODIFY ("ID_RENT" NOT NULL ENABLE);
  ALTER TABLE "RENTS" MODIFY ("DATE_START" NOT NULL ENABLE);
  ALTER TABLE "RENTS" MODIFY ("CARS_ID_CAR" NOT NULL ENABLE);
  ALTER TABLE "RENTS" MODIFY ("USERS_ID_USER" NOT NULL ENABLE);
  ALTER TABLE "RENTS" ADD CONSTRAINT "RENTS_PK" PRIMARY KEY ("ID_RENT")
  USING INDEX "RENTS_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TOWNS
--------------------------------------------------------

  ALTER TABLE "TOWNS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "TOWNS" MODIFY ("POSTCODE" NOT NULL ENABLE);
  ALTER TABLE "TOWNS" ADD CONSTRAINT "TOWNS_PK" PRIMARY KEY ("ID_TOWN")
  USING INDEX "TOWNS_PK"  ENABLE;
  ALTER TABLE "TOWNS" ADD CONSTRAINT "TOWNS_POSTCODE_UN" UNIQUE ("POSTCODE")
  USING INDEX "TOWNS_POSTCODE_UN"  ENABLE;
  ALTER TABLE "TOWNS" MODIFY ("ID_TOWN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "USERS" MODIFY ("ID_USER" NOT NULL ENABLE);
  ALTER TABLE "USERS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "USERS" MODIFY ("SURNAME" NOT NULL ENABLE);
  ALTER TABLE "USERS" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "USERS" MODIFY ("PHONE" NOT NULL ENABLE);
  ALTER TABLE "USERS" MODIFY ("LICENCE_NUMBER" NOT NULL ENABLE);
  ALTER TABLE "USERS" MODIFY ("ADDRESSES_ID_ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "USERS" ADD CONSTRAINT "USERS_PK" PRIMARY KEY ("ID_USER")
  USING INDEX "USERS_PK"  ENABLE;
  ALTER TABLE "USERS" ADD CONSTRAINT "USERS_LICENCE_NUMBER_UN" UNIQUE ("LICENCE_NUMBER")
  USING INDEX "USERS_LICENCE_NUMBER_UN"  ENABLE;
--------------------------------------------------------
--  Constraints for Table VAT_RATES
--------------------------------------------------------

  ALTER TABLE "VAT_RATES" MODIFY ("ID_VAT" NOT NULL ENABLE);
  ALTER TABLE "VAT_RATES" MODIFY ("VAT_RATE" NOT NULL ENABLE);
  ALTER TABLE "VAT_RATES" ADD CONSTRAINT "VAT_RATES_PK" PRIMARY KEY ("ID_VAT")
  USING INDEX "VAT_RATES_PK"  ENABLE;
  ALTER TABLE "VAT_RATES" ADD CONSTRAINT "VAT_RATES_VAT_RATE_UN" UNIQUE ("VAT_RATE")
  USING INDEX "VAT_RATES_VAT_RATE_UN"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ADDRESSES
--------------------------------------------------------

  ALTER TABLE "ADDRESSES" ADD CONSTRAINT "ADDRESSES_TOWNS_FK" FOREIGN KEY ("TOWNS_ID_TOWN")
	  REFERENCES "TOWNS" ("ID_TOWN") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CARS
--------------------------------------------------------

  ALTER TABLE "CARS" ADD CONSTRAINT "CARS_CAR_TYPES_FK" FOREIGN KEY ("CAR_TYPES_ID_CAR_TYPE")
	  REFERENCES "CAR_TYPES" ("ID_CAR_TYPE") ENABLE;
  ALTER TABLE "CARS" ADD CONSTRAINT "CARS_DEPARTMENTS_FK" FOREIGN KEY ("DEPARTMENTS_ID_DEPARTMENT")
	  REFERENCES "DEPARTMENTS" ("ID_DEPARTMENT") ENABLE;
  ALTER TABLE "CARS" ADD CONSTRAINT "CARS_MANUFACTURERS_FK" FOREIGN KEY ("MANUFACTURERS_ID_MANUFACTURER")
	  REFERENCES "MANUFACTURERS" ("ID_MANUFACTURER") ENABLE;
  ALTER TABLE "CARS" ADD CONSTRAINT "CARS_VAT_RATES_FK" FOREIGN KEY ("VAT_RATES_ID_VAT")
	  REFERENCES "VAT_RATES" ("ID_VAT") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DEPARTMENTS
--------------------------------------------------------

  ALTER TABLE "DEPARTMENTS" ADD CONSTRAINT "DEPARTMENTS_ADDRESSES_FK" FOREIGN KEY ("ADDRESSES_ID_ADDRESS")
	  REFERENCES "ADDRESSES" ("ID_ADDRESS") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table INVOICES
--------------------------------------------------------

  ALTER TABLE "INVOICES" ADD CONSTRAINT "INVOICES_DEPARTMENTS_FK" FOREIGN KEY ("DEPARTMENTS_ID_DEPARTMENT")
	  REFERENCES "DEPARTMENTS" ("ID_DEPARTMENT") ENABLE;
  ALTER TABLE "INVOICES" ADD CONSTRAINT "INVOICES_RENTS_FK" FOREIGN KEY ("RENTS_ID_RENT")
	  REFERENCES "RENTS" ("ID_RENT") ENABLE;
  ALTER TABLE "INVOICES" ADD CONSTRAINT "INVOICES_USERS_FK" FOREIGN KEY ("USERS_ID_USER")
	  REFERENCES "USERS" ("ID_USER") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table RENTS
--------------------------------------------------------

  ALTER TABLE "RENTS" ADD CONSTRAINT "RENTS_CARS_FK" FOREIGN KEY ("CARS_ID_CAR")
	  REFERENCES "CARS" ("ID_CAR") ENABLE;
  ALTER TABLE "RENTS" ADD CONSTRAINT "RENTS_USERS_FK" FOREIGN KEY ("USERS_ID_USER")
	  REFERENCES "USERS" ("ID_USER") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "USERS" ADD CONSTRAINT "USERS_ADDRESSES_FK" FOREIGN KEY ("ADDRESSES_ID_ADDRESS")
	  REFERENCES "ADDRESSES" ("ID_ADDRESS") ENABLE;
